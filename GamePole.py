from random import randint, choice

ANS_FOR_CHOICE_MODE = '''–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –≤–≤–µ–¥–∏—Ç–µ "1".
–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏ –≤–≤–µ–¥–∏—Ç–µ "2".
–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏–≥—Ä–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º –≤–≤–µ–¥–∏—Ç–µ "help"\n'''

ANS_FOR_CHOICE_POLE_SIZE = '''–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
(–æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 7 –¥–æ 11 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ): '''

HELP = '''---------------------------–°–ü–†–ê–í–ö–ê---------------------------
–í –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –ø–æ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é.
–í —Ä–µ–∂–∏–º–µ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏ –Ω–µ–ø–æ–¥–±–∏—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞.
–ü–æ—ç—Ç–æ–º—É –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ –≤—ã—Å—Ç—Ä–µ–ª–µ –≤ —Ç—É –∫–ª–µ—Ç–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞,
–ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–Ω–µ–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏, –µ—Å–ª–∏ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ –Ω–µ—Ç
–≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è, –æ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç —Å–≤–æ—é –∏–∫–æ–Ω–∫—É —Å ‚¨õÔ∏è –Ω–∞ üåä.
–í —Ä–µ–∂–∏–º–µ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏ —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å,
–∏ —á–µ—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç —Ç–∞–∫ –∏–º –∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–∞–∫ –∫–∞–∫, –ø–æ–≤—Ç–æ—Ä—é—Å—å,
–Ω–µ–ø–æ–¥–±–∏—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —Ä–µ–∂–∏–º–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ –µ–≥–æ –≤—ã–±–æ—Ä–∞
–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã.
-------------------------------------------------------------'''

TITLE = '=' * 30 + '–ú–û–†–°–ö–û–ô –ë–û–ô' + '=' * 30

START_RULES = '''–ù–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è. –°–ª–µ–≤–∞ —Ä–∞—Å–ø–æ–ª–æ–≥–∞–µ—Ç—Å—è –ø–æ–ª–µ
–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —Å–ø—Ä–∞–≤–∞ –≤–∞—à–µ –ø–æ–ª–µ.'''

RULES_FOR_CLASSIC = '''–ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—é—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ —É –≤–∞—Å, —Ç–∞–∫ –∏ —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ–¥–Ω–∏ —á–µ—Ä–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã.
–í –ª—é–±—É—é —á–µ—Ä–Ω—É—é –∫–ª–µ—Ç–∫—É –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å. –ï—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å
–∫–æ—Ä–∞–±–ª—è, —Ç–æ –∫–ª–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Å ‚¨õ –Ω–∞ üåä. –ï—Å–ª–∏ –æ–∫–∞–∂–µ—Ç—Å—è –∫–æ—Ä–∞–±–ª—å —Ç–æ –∏–∫–æ–Ω–∫–∞ —Å–º–µ–Ω–∏—Ç—Å—è
–Ω–∞ üî•, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–±–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –∏ —É –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –ø–∞–ª—É–±—ã, –∞ –µ—Å–ª–∏
—É –∫–æ—Ä–∞–±–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞–ª—É–± —Ç–æ –∏–∫–æ–Ω–∫–∞ ‚¨õ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ üíÄ.

–ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –≤—Å–µ–º –∏–∫–æ–Ω–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è:
‚¨õÔ∏è - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å; 
üåä - –Ω–∞ –≤–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–ª–µ—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∫–æ—Ä–∞–±–ª—è.
–í –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ –∫–ª–µ—Ç–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–Ω–µ–µ —Å—Ç—Ä–µ–ª—è–ª–∏
–Ω–æ –∫–æ—Ä–∞–±–ª—è —Ç–∞–º –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å;
üî• - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥–±–∏—Ç–∞—è –ø–∞–ª—É–±–∞ –∫–æ—Ä–∞–±–ª—è, –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º–ø–æ–ª–µ, —Ç–∞–∫
–∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞;
üíÄ - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä–∞–±–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ –ø–∞–ª—É–±—ã –ø–æ–¥–±–∏—Ç—ã, –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º
–ø–æ–ª–µ, —Ç–∞–∫ –∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–≤–∞ —á–∏—Å–ª–∞
–≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 0 –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (—Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –≤—ã –≤–≤–æ–¥–∏–ª–∏ —á—É—Ç—å —Ä–∞–Ω–µ–µ).
–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ - —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –∫–ª–µ—Ç–∫–∏, –≤—Ç–æ—Ä–∞—è - —Å—Ç—Ä–æ–∫–∞.
–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º–∏. –£–¥–∞—á–∏!'''

RULES_FOR_MOVED = '''–ö–æ—Ä–∞–±–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—é—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ —É –≤–∞—Å, —Ç–∞–∫ –∏ —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –æ–¥–Ω–∏ —á–µ—Ä–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã.
–ë–æ–ª–µ–µ —Ç–æ–≥–æ - –µ—Å–ª–∏ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥ –∏ –≤ —Ç–æ–π –∫–ª–µ—Ç–∫–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞,
—Ç–æ –¥–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —á–µ—Ä–Ω–æ–π, –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ —á—Ç–æ –≤–∞—à–∏ –Ω–µ –ø–æ–¥–±–∏—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏,
—á—Ç–æ –Ω–µ –ø–æ–¥–±–∏—Ç—ã–µ –∫–æ—Ä–æ–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è.
–ò–∑–º–µ–Ω—è—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –±—É–¥—É—Ç –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª–µ—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª –∫–æ—Ä–∞–±–ª—å, —Ç–∞–∫ –∫–∞–∫
–ø–æ–¥–±–∏—Ç—ã–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è.

–ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∏–∫–æ–Ω–∫–∏:
‚¨õÔ∏è - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–µ –∫–ª–µ—Ç–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å; 
üåä - –Ω–∞ –≤–∞—à–µ–º –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–ª–µ—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∫–æ—Ä–∞–±–ª—è.
–í –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ç–∞–∫–∏—Ö –∏–∫–æ–Ω–æ–∫;
üî• - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–¥–±–∏—Ç–∞—è –ø–∞–ª—É–±–∞ –∫–æ—Ä–∞–±–ª—è, –∫–∞–∫ –Ω–∞ –≤–∞—à–µ–º
–ø–æ–ª–µ, —Ç–∞–∫ –∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞;
üíÄ - —Ç–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä–∞–±–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ –ø–∞–ª—É–±—ã –ø–æ–¥–±–∏—Ç—ã, –∫–∞–∫
–Ω–∞ –≤–∞—à–µ–º –ø–æ–ª–µ, —Ç–∞–∫ –∏ –Ω–∞ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
'''

END_RULES = '''–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–≤–∞ —á–∏—Å–ª–∞
–≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 0 –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (—Ä–∞–∑–º–µ—Ä –ø–æ–ª—è –≤—ã –≤–≤–æ–¥–∏–ª–∏ —á—É—Ç—å —Ä–∞–Ω–µ–µ).
–ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ - —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –∫–ª–µ—Ç–∫–∏, –≤—Ç–æ—Ä–∞—è - —Å—Ç—Ä–æ–∫–∞.
–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º–∏. –£–¥–∞—á–∏!'''

UNDER_LINE = '=' * 71


class SizeRangeException(Exception):
    '''–î–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –≤–≤–æ–¥–∏—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ 7 <= n <= 10.
    –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª—è, –∞ —Ç–∞–∫–∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–æ–∫ –≤ –∏–≥—Ä–µ'''


class DescriptorForShip:

    def __set_name__(self, owner, name):
        self.name = '_' + name

    def __get__(self, instance, owner):
        return instance.__dict__[self.name]

    def __set__(self, instance, value):
        instance.__dict__[self.name] = value


class Ship:
    tp = DescriptorForShip()
    length = DescriptorForShip()
    is_move = DescriptorForShip()

    def __init__(self, length, tp=1, x=None, y=None):
        self._x, self._y = x, y
        self._length = length
        self._tp = tp
        self._is_move = True
        self._cells = [1] * length
        self._is_dead = False

    def __getitem__(self, indx):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ _cells –∫–æ—Ä–∞–±–ª—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É'''
        return self._cells[indx]

    def __setitem__(self, indx, value):
        '''–ü—Ä–∏ –ø–æ–º–æ—â–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∫–æ—Ä–∞–±–ª—è'''
        if not self._is_dead:
            if value == 2:
                self._is_move = False
                self._cells[indx] = value
            if {*self._cells} == {2}:
                self._is_dead = True
                self._cells[:] = [3] * self._length

    @property
    def is_dead(self):
        return self._is_dead

    def set_start_coords(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–∞–±–ª—è'''
        self._x, self._y = x, y

    def get_start_coords(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –∫–æ—Ä–∞–±–ª—è–º–∏'''
        return self._x, self._y

    def move(self, go):
        '''–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –ª–∏–±–æ –≤–ø–µ—Ä–µ–¥, –ª–∏–±–æ –Ω–∞–∑–∞–¥
        –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–ª–∞–≥ _is_move —Ä–∞–≤–µ–Ω True'''
        if self._tp == 1:
            self._x += go
        else:
            self._y += go

    def is_collide(self, ship):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∫–æ—Ä–∞–±–ª–µ–º ship
        –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ'''
        if self._tp == 1:
            if ship._tp == 1:
                check1 = self._x - 1 <= ship._x <= self._x + self._length
                check2 = self._x - 1 <= ship._x + ship._length - 1 <= self._x + self._length
                check3 = self._y - 1 <= ship._y <= self._y + 1
            else:  # ship._tp == 2
                check1 = self._y - 1 <= ship._y <= self._y + 1
                check2 = self._y - 1 <= ship._y + ship._length - 1 <= self._y + 1
                check3 = self._x - 1 <= ship._x <= self._x + self._length
        else:  # self._tp == 2
            if ship._tp == 1:
                check1 = self._x - 1 <= ship._x <= self._x + 1
                check2 = self._x - 1 <= ship._x + ship._length - 1 <= self._x + 1
                check3 = self._y - 1 <= ship._y <= self._y + self._length
            else:  # ship._tp == 2
                check1 = self._y - 1 <= ship._y <= self._y + self._length
                check2 = self._y - 1 <= ship._y + ship._length - 1 <= self._y + self._length
                check3 = self._x - 1 <= ship._x <= self._x + 1
        return (check1 or check2) and check3

    def is_out_pole(self, size):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ —Ç–æ, –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∫–æ—Ä–∞–±–ª—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True
        –µ—Å–ª–∏ –≤—ã—à–µ–ª –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ'''
        if self._tp == 1:
            return self._x < 0 or self._x + self._length > size
        return self._y < 0 or self._y + self._length > size

    def set_shot(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–æ—Ä–∞–ª–ª—å –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–ª–∏,
        –∞ —Ç–∞–∂–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç –∫–æ—Ä–∞–ª—å'''
        if self._tp == 1:
            if self._y == y and self._x <= x < self._x + self._length:
                self.__setitem__(x - self._x, 2)
                return True
            return False
        else:
            if self._x == x and self._y <= y < self._y + self._length:
                self.__setitem__(y - self._y, 2)
                return True
            return False


class GamePole:

    def __init__(self, size):
        self._size = size
        self._ships = list()

    def init(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É. –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ–±–ª–∏ –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.

        –ü—Ä–æ–±–ª–µ–º—É –∑–∞–≤–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä–æ–±–ª–µ–π —Ä–µ—à–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ –ª–æ–± –∏ —Ç–æ–ø–æ—Ä–Ω–æ
        –Ω–æ —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—á–∏–π) –ï—Å–ª–∏ –∑–∞ 100 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∫–æ—Ä–æ–±–ª—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ
        —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞—é init –∏ –≤—Å–µ –Ω–∞—á–∏–Ω–∞—é —Å –Ω–∞—á–∞–ª–∞. –î–ª—è –ø–æ–ª—è 7 x 7 –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ 5-10 —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–µ. –í–µ—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∞–Ω–∏–π –Ω–µ –Ω–∞–±–ª—é–¥–∞–ª –ø—Ä–∏ —Ç–µ—Ö –∂–µ 7)'''
        for length in range(4, 0, -1):
            for _ in range(5 - length):
                try_count = 0
                while True:
                    try_count += 1
                    if try_count == 100:
                        self._ships.clear()
                        self.init()
                        return
                    ship = Ship(length, randint(1, 2), randint(0, self._size - 1), randint(0, self._size - 1))
                    if ship.is_out_pole(self._size):
                        continue
                    if self.__checking_collisions_with_other_ships(ship):
                        self._ships.append(ship)
                        break

    def __checking_collisions_with_other_ships(self, check_ship):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–∞–±–ª—å —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞—Ä–∞–±–ª—è–º–∏ –∏
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –µ—Å–ª–∏ —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è, –∞ True –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ'''
        for ship in self._ships:
            if check_ship is not ship and check_ship.is_collide(ship):
                return False
        return True

    def get_ships(self):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π'''
        return self._ships

    def move_ships(self):
        '''–ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–µ –ø–æ–¥–±–∏—Ç –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –±–µ–∑
        —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏ —Ç–æ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç –∫–æ—Ä–∞–±–ª—å.
        –¢–∞–∫–∂–µ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–µ–Ω—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –µ—Å–ª–∏
        –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ–ø—ã—Ç–∫–∞ –µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        —Å –±–∞–∑–æ–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π'''

        def move_ship_procedure():
            '''–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–µ—Ç –∫–æ—Ä–∞–±–ª—å'''
            shift = choice((-1, 1))
            ship.move(shift)
            if check_for_move_ship_prod():
                ship.move(-shift * 2)
                if check_for_move_ship_prod():
                    ship.move(shift)
                    return False
            return True

        def check_for_move_ship_prod():
            '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–≤–∏–≥—É—Ç—å –∫–æ—Ä–∞–±–ª—å'''
            return ship.is_out_pole(self._size) \
                or not self.__checking_collisions_with_other_ships(ship)

        for ship in self._ships:
            if ship.is_move:
                if ship.length == 1:
                    if not move_ship_procedure():
                        ship.tp = 1 if ship.tp == 2 else 2
                        move_ship_procedure()
                else:
                    move_ship_procedure()

    def get_pole(self):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
        0 - –≤–æ–¥–∞
        1 - –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è
        2 - –ø–æ–¥–±–∏—Ç—ã–π –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è'''
        pole = [[0] * self._size for _ in range(self._size)]
        for ship in self._ships:
            x, y = ship.get_start_coords()
            for shift in range(ship.length):
                if ship.tp == 1:
                    pole[y][x + shift] = ship[shift]
                else:
                    pole[y + shift][x] = ship[shift]
        return tuple(map(tuple, pole))

    def show(self):
        '''–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        0 - –≤–æ–¥–∞
        1 - –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è
        2 - –ø–æ–¥–±–∏—Ç—ã–π –∫–æ—Ä–∞–±–ª—å –∏–ª–∏ —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è'''
        pole = self.get_pole()
        for line in pole:
            print(' '.join(map(str, line)))


class PlayerSeaBattle:
    '''–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'''

    def __init__(self, game_obj):
        self.pole = GamePole(game_obj.pole_size)
        self.pole.init()
        self._pole_size = game_obj.pole_size
        self._game_obj = game_obj
        # –í shot_cells —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞—é—Ç —Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫, –ø–æ—Å–ª–µ —Å—Ç—Ä–µ–ª—å–±—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–∂–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        self._shoot_cells = list()
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–±–∏—Ç—ã—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π. –ù—É–∂–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        self.count_opponent_dead_ship = 0

    def step(self):
        '''–†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
        –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ step –≤ {self.__class__.__name__}')

    def _get_coords_for_shot(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _get_coords_for_shot –≤ {self.__class__.__name__}')


class User(PlayerSeaBattle):
    '''–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è —Ç–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã
    –∑–∞ –ª–æ–≥–∏–∫—É —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –º–æ—Ä–æ—Å–∫–æ–≥–æ –±–æ—è —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏'''

    def step(self, enemy_ships):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        while self.count_opponent_dead_ship != 10:
            coords = self._get_coords_for_shot()
            ship = self._search_ship_for_shot(*coords, enemy_ships)
            if not ship:
                print('\n‚ùå–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å')
                print('-' * 40)
                break
            if not ship.is_dead:
                print('\nüî•–í—ã –ø–æ–¥–±–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å')
            else:
                self.count_opponent_dead_ship += 1
                print('\nüíÄ–í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å')
            self._game_obj.show_game()

    def _get_coords_for_shot(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        while True:
            coords = input('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ')
            try:
                x, y = map(int, coords.split(' '))
                if not 0 <= x < self._pole_size \
                        or not 0 <= y < self._pole_size:
                    raise SizeRangeException
                if (x, y) in self._shoot_cells:
                    print('–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
                    continue
            except ValueError:
                print(f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            except SizeRangeException:
                print(
                    f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n–û–±–∞ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ –∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ {self._pole_size - 1}.")
            else:
                return x, y

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª—Å—è
        –∫–æ—Ä–∞–±–ª—å —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –∞ —Ç–∞–∫–∂–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –ø–æ –∫–æ—Ä–∞–±–ª—é. –ü—Ä–∏–º–µ—Ä–Ω–æ
        –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _search_ship_for_shot –≤ {self.__class__.__name__}')


class UserForClassic(User):
    '''–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ —Å –∏–≥—Ä–æ–π –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏–≥—Ä—ã'''

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        self._shoot_cells.append((x, y))
        for ship in enemy_ships:
            if ship.set_shot(x, y):
                return ship
        return False


class UserForMoveShips(User):
    '''–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ —Å –∏–≥—Ä–æ–π –≤ —Ä–µ–∂–∏–º–µ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏'''

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        for ship in enemy_ships:
            if ship.set_shot(x, y):
                self._shoot_cells.append((x, y))
                return ship
        return False


class Computer(PlayerSeaBattle):
    '''–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è —Ç–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã
        –∑–∞ –ª–æ–≥–∏–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è, –∞ —Ç–∞–∫–∂–µ
        –¥–ª—è –º–æ—Ä–æ—Å–∫–æ–≥–æ –±–æ—è —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏'''

    def __init__(self, game_obj):
        super().__init__(game_obj)
        # curr_ship_shot_cells - —Å–ø–∏—Å–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–¥–±–∏—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ—Ä–∞–±–ª—è. –û—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–±–∏—Ç–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
        self._curr_ship_shot_cells = list()
        # –í targets –ø–æ–ø–∞–¥–∞—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ—Ä–æ–±–ª—è –∏–≥—Ä–æ–∫–∞
        self._targets = list()
        # map_user_dead_ships - —ç—Ç–æ –ø–æ–ª–µ —Å —É–±–∏—Ç—ã–º–∏ –≤—Ä–∞–∂–µ—Å–∫–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏. –ù—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Å—Ç—Ä–µ–ª—è–ª –≤ —Ç–µ –∫–ª–µ—Ç–∫–∏, –≥–¥–µ –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ–±–ª—è –∏–≥—Ä–æ–∫–∞. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∫–æ—Ä–∞–±–ª—è –∏–≥—Ä–æ–∫–∞
        self._map_user_dead_ships = [[0] * self._pole_size for _ in range(self._pole_size)]
        # shoot_counter - —ç—Ç–æ —Å—á–µ—Ç—á–∏–∫ –ø–∞–ª—É–± –∫–æ—Ä–∞–±–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π
        self._shoot_counter = 0
        # target_ship_is_dead == True –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π –µ—â–µ –Ω–µ —É–±–∏—Ç, –Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å
        self._target_ship_is_dead = False
        # tp_attacked_ship != None –µ—Å–ª–∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é 3, 4 –ø–∞–ª—É–±–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ 1, –ª–∏–±–æ 2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏. –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö == None
        self._tp_attacked_ship = None

    def _get_coords_for_shot(self):
        '''–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _get_coords_for_shot –≤ {self.__class__.__name__}')

    def _check_coords_for_target(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–æ–¥–∏–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—Ç—Ä–µ–ª–∞ –∫–æ—Ä–∞–±–µ–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        –∫–∞—Ä—Ç—ã, –∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–∏ —Ä—è–¥–æ–º —Å —Ä–∞–Ω–µ–µ —É–±–∏—Ç—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏.
        –ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _search_ship_for_shot –≤ {self.__class__.__name__}')

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –µ—Å—Ç—å –∫–æ—Ä–∞–±–ª—å –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –µ—Å—Ç—å
        –µ—â–µ –µ–≥–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç.–ü—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–∞–∂–¥–æ–º
        –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ —Å–æ —Å–≤–æ–∏–º–∏ –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _search_ship_for_shot –≤ {self.__class__.__name__}')

    def _is_not_enemies_ships_around_coords(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ù–ï–¢ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –£–ë–ò–¢–´–• –∫–æ—Ä–∞–±–ª–µ–π –∏
        False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ. –ù—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–ª–∏—Ç—å –ø–æ —Ç–µ–º –∫–ª–µ—Ç–∫–∞–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö
        —Ç–æ—á–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–∞–±–ª—è —É –∏–≥—Ä–æ–∫–∞'''
        avoid_neg_coord = lambda coord: 0 if coord < 0 else coord
        return not bool(sum(sum(line[avoid_neg_coord(x - 1): x + 2])
                            for line in self._map_user_dead_ships[avoid_neg_coord(y - 1): y + 2]))

    def _upd_map_user_dead_ships(self, ship):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –º–µ—Ä—Ç–≤—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π –∫–∞–∂–¥—ã–π —Ä–∞–∑, –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –∫–æ—Ä–∞–±–ª—è'''
        x, y = ship.get_start_coords()
        for add in range(ship.length):
            if ship.tp == 1:
                self._map_user_dead_ships[y][x + add] = 1
            else:
                self._map_user_dead_ships[y + add][x] = 1

    # ---–ú–ï–¢–û–î–´ –î–õ–Ø –õ–û–ì–ò–ö–ò –†–ê–ë–û–¢–´ –ú–ï–¢–û–î–ê STEP---------------------------------------------
    def _set_targets_for_second_cell(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Å—Ç—Ä–µ–ª–∞ –≤—Ç–æ—Ä–æ–π –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è'''
        for x, y in ((x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)):
            if self._check_coords_for_target(x, y):
                self._targets.append((x, y))

    def _set_targets_for_third_cell(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Å—Ç–µ–ª–∞ —Ç—Ä–µ—Ç—å–µ–π –ø–∞–ª—É–±—ã –∫–æ—Ä–∞–±–ª—è.
        –¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–∏–∞–µ–Ω—Ç–∞—Ü–∏—é –∫–æ—Ä–æ–±–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π.
        –î–∞–ª–µ–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç "–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ä–∞–±–ª—è". –ü—Ä–µ–¥—Ä–µ—à–µ–Ω–Ω—ã–º –∫–æ—Ä–∞–±–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è
        —Ç–æ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è –¥–≤—É–º.
        –ò–Ω–∞—á–µ –ø—Ä–∏–¥–µ—Ç—Å—è –≥–∞–¥–∞—Ç—å'''
        min_x, max_x = sorted(x for x, _ in self._curr_ship_shot_cells)
        min_y, max_y = sorted(y for _, y in self._curr_ship_shot_cells)
        self._tp_attacked_ship = 1 if min_y == max_y else 2
        if self._tp_attacked_ship == 1:
            y = min_y
            temp_targets = [(min_x - 2, y), (min_x - 1, y), (max_x + 1, y), (max_x + 2, y)]
        else:
            x = min_x
            temp_targets = [(x, min_y - 2), (x, min_y - 1), (x, max_y + 1), (x, max_y + 2)]
        self._targets.clear()
        for x, y in temp_targets:
            if self._check_coords_for_target(x, y):
                self._targets.append((x, y))
        if len(self._targets) <= 2:
            self._target_ship_is_dead = True
        else:
            x, y = min(self._curr_ship_shot_cells)
            if self._tp_attacked_ship == 1:
                self._targets[:] = [(x - 1, y)]
            else:
                self._targets[:] = [(x, y - 1)]

    def _set_targets_for_four_cell(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
        4 –ø–∞–ª—É–±—ã –∫–æ—Ä–∞–±–ª—è. –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å—Ç–∞—è. –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —á–µ—Ç–≤–µ—Ä—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å
        –∫–∞–∫ —Å —Å –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ü–∞, —Ç–∞–∫ –∏ —Å –¥—Ä—É–≥–æ–≥–æ. –í–æ—Ç —ç—Ç–∏ –¥–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è'''
        if self._tp_attacked_ship == 1:
            y = self._curr_ship_shot_cells[-1][1]
            min_x, _, max_x = sorted(x for x, _ in self._curr_ship_shot_cells)
            self._targets[:] = [(min_x - 1, y), (max_x + 1, y)]
        else:
            x = self._curr_ship_shot_cells[-1][0]
            min_y, _, max_y = sorted(y for _, y in self._curr_ship_shot_cells)
            self._targets[:] = [(x, min_y - 1), (x, max_y + 1)]

    def _set_targets_after_miss(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –µ—Å–ª–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–ª–µ—Ç–∫–∏ –º—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å.
        –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Å –¥–≤—É—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–æ–≤'''
        if self._tp_attacked_ship == 1:
            y = self._curr_ship_shot_cells[-1][1]
            max_x = max(self._curr_ship_shot_cells)[0]
            self._targets[:] = [(max_x + 1, y), (max_x + 2, y)]
        else:
            x = self._curr_ship_shot_cells[-1][0]
            max_y = max(self._curr_ship_shot_cells)[1]
            self._targets[:] = [(x, max_y + 1), (x, max_y + 2)]

    # -----------------------------------------------------------------------------------

    def step(self, enemy_ships):
        '''–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ–¥—É–µ—Ç –ª–æ–≥–∏–∫–æ–π —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ—Ä–æ–±–ª–µ–π –∏–≥—Ä–æ–∫–∞'''
        log_actions = list()
        while self.count_opponent_dead_ship != 10:
            x, y = self._get_coords_for_shot()
            ship = self._search_ship_for_shot(x, y, enemy_ships)
            if ship:  # –ï—Å–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è
                if not ship.is_dead:  # –ï—Å–ª–∏ –ø–æ–¥—Å—Ç—Ä–µ–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–±–∏—Ç
                    if not self._target_ship_is_dead:  # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
                        if self._shoot_counter == 0:  # –ï—Å–ª–∏ –º—ã –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –í–ü–ï–†–í–´–ï
                            self._shoot_counter += 1
                            self._set_targets_for_second_cell(x, y)
                        elif self._shoot_counter == 1:  # –ï—Å–ª–∏ –º—ã –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –≤–æ –í–¢–û–†–û–ô —Ä–∞–∑
                            self._set_targets_for_third_cell()
                            self._shoot_counter += 1
                        elif self._shoot_counter == 2:  # –ï—Å–ª–∏ –º—ã –ø–æ–¥—Å—Ç—Ä–µ–ª–∏–ª–∏ –∫–æ—Ä–∞–±–ª—å –≤ –¢–†–ï–¢–ò–ô –†–ê–ó
                            self._shoot_counter += 1
                            self._set_targets_for_four_cell()
                            self._target_ship_is_dead = True
                    log_actions.append(f'üî•–í–∞—à {ship.length}-–ø–∞–ª—É–±–Ω–∏–∫ –ø–æ–¥–±–∏—Ç')
                else:  # –ü–æ–¥—Å—Ç—Ä–µ–ª–µ–Ω–Ω—ã–π –∫–æ—Ä–∞–±–ª—å —É–±–∏—Ç
                    self.count_opponent_dead_ship += 1
                    self._upd_map_user_dead_ships(ship)
                    self._targets.clear()
                    self._curr_ship_shot_cells.clear()
                    self._target_ship_is_dead = False
                    self._tp_attacked_ship = None
                    self._shoot_counter = 0
                    log_actions.append(f'‚ò†Ô∏è–í–∞—à {ship.length}-–ø–∞–ª—É–±–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω')
            else:  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è
                if self._shoot_counter == 2 and not self._target_ship_is_dead:  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–µ —É–≥–∞–¥–∞–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    self._target_ship_is_dead = True
                    self._set_targets_after_miss()
                self._print_log_actions(log_actions)
                break
        else:  # –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ while –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            if log_actions:
                self._print_log_actions(log_actions)

    def _print_log_actions(self, log_actions):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—á–∞—Ç–∞–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –æ–ø–ø–∞–Ω–µ–Ω—Ç–∞'''
        if not log_actions:
            print('‚ùå–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è')
        else:
            print('\n'.join(log_actions))
        self._game_obj.show_game()


class ComputerForClassic(Computer):
    '''–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –∏–≥—Ä–µ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ'''

    def _get_coords_for_shot(self):
        '''–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'''
        if self._targets:
            return self._targets.pop(0)
        while True:
            coords = randint(0, self._pole_size - 1), randint(0, self._pole_size - 1)
            if coords not in self._shoot_cells and self._is_not_enemies_ships_around_coords(*coords):
                return coords

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        self._shoot_cells.append((x, y))
        for ship in enemy_ships:
            if ship.set_shot(x, y):
                self._curr_ship_shot_cells.append((x, y))
                return ship
        return False

    def _check_coords_for_target(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–æ–¥–∏–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—Ç—Ä–µ–ª–∞ –∫–æ—Ä–∞–±–µ–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        –∫–∞—Ä—Ç—ã, –∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–∏ —Ä—è–¥–æ–º —Å —Ä–∞–Ω–µ–µ —É–±–∏—Ç—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏'''
        if 0 <= x < self._pole_size:
            if 0 <= y < self._pole_size:
                if (x, y) not in self._shoot_cells and self._is_not_enemies_ships_around_coords(x, y):
                    return True
        return False


class ComputerForMoveShips(Computer):
    '''–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –∏–≥—Ä–µ –≤ —Ä–µ–∂–∏–º–µ —Å –¥–≤–∏–∂—É—â–∏–º–∏—Å—è –∫–æ—Ä–∞–±–ª—è–º–∏'''

    def _get_coords_for_shot(self):
        '''–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'''
        if self._targets:
            return self._targets.pop(0)
        while True:
            coords = randint(0, self._pole_size - 1), randint(0, self._pole_size - 1)
            if coords not in self._shoot_cells and self._is_not_enemies_ships_around_coords(*coords):
                return coords

    def _search_ship_for_shot(self, x, y, enemy_ships):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        for ship in enemy_ships:
            if ship.set_shot(x, y):
                self._shoot_cells.append((x, y))
                self._curr_ship_shot_cells.append((x, y))
                return ship
        return False

    def _check_coords_for_target(self, x, y):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–æ–¥–∏–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—Ç—Ä–µ–ª–∞ –∫–æ—Ä–∞–±–µ–π. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        –∫–∞—Ä—Ç—ã, –∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ–±—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—ã–ª–∏ —Ä—è–¥–æ–º —Å —Ä–∞–Ω–µ–µ —É–±–∏—Ç—ã–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏'''
        if 0 <= x < self._pole_size:
            if 0 <= y < self._pole_size:
                if self._is_not_enemies_ships_around_coords(x, y):
                    return True
        return False


class SeaBattle:
    '''–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –¥–ª—è –∫–ª–∞—Å—Å–æ–≤, —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö
    –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É'''

    def __init__(self):
        self._pole_size = self._set_pole_size()

    def _set_pole_size(self):
        '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è'''
        while True:
            size = input(ANS_FOR_CHOICE_POLE_SIZE)
            try:
                size = int(size)
                if not 7 <= size <= 11:
                    raise SizeRangeException
            except ValueError:
                print("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n")
            except SizeRangeException:
                print(
                    "–í—ã –≤–≤–µ–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç 7 –¥–æ 11 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n")
            else:
                return size

    @property
    def pole_size(self):
        return self._pole_size

    def _start_game(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º—É –∏–≥—Ä—É'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _start_game –≤ {self.__class__.__name__}')

    def _game(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω –∑–∞ —Ö–æ–¥ —Å–∞–º–æ–π –∏–≥—Ä—ã'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ _game –≤ {self.__class__.__name__}')

    def show_game(self):
        '''–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–ø—å—é–µ—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞'''
        raise NotImplementedError(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ show_game –≤ {self.__class__.__name__}')


class ClassicSeaBattle(SeaBattle):

    def __init__(self):
        super().__init__()
        self._user = UserForClassic(self)
        self._comp = ComputerForClassic(self)
        self._start_game()

    def _start_game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        print()
        print(TITLE)
        print(START_RULES)
        self.show_game()
        print(RULES_FOR_CLASSIC)
        print(END_RULES)
        print(UNDER_LINE)
        self._game()

    def _game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        game_step = 0
        while self._user.count_opponent_dead_ship != 10 and self._comp.count_opponent_dead_ship != 10:
            if not game_step % 2:
                self._user.step(self._comp.pole.get_ships())
            else:
                self._comp.step(self._user.pole.get_ships())
            game_step += 1
        if self._user.count_opponent_dead_ship == 10:
            print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
        else:
            print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...')

    def show_game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        player_pole = self._user.pole.get_pole()
        computer_pole = self._comp.pole.get_pole()
        player_chars = ['üåä', 'üõ≥', 'üî•', 'üíÄÔ∏è']
        comp_chars = ['‚¨õ', '‚¨õ', 'üî•', 'üíÄÔ∏è']
        fields_chars = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
        print()
        print('  ', end='')
        print(*fields_chars[:self._pole_size], sep='')
        for y in range(self._pole_size):
            print(fields_chars[y], end='')
            for x in range(self._pole_size):
                if computer_pole[y][x] == 0 and (x, y) in self._user._shoot_cells:
                    print('üåä', end='')
                else:
                    print(comp_chars[computer_pole[y][x]], end='')
            print('   ', end='')
            for cell in player_pole[y]:
                print(player_chars[cell], end='')
            print()
        print()


class MoveShipsSeaBattle(SeaBattle):

    def __init__(self):
        super().__init__()
        self._user = UserForMoveShips(self)
        self._comp = ComputerForMoveShips(self)
        self._start_game()

    def _start_game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        print()
        print(TITLE)
        print(START_RULES)
        self.show_game()
        print(RULES_FOR_MOVED)
        print(END_RULES)
        print(UNDER_LINE)
        self._game()

    def _game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        game_step = 0
        while self._user.count_opponent_dead_ship != 10 and self._comp.count_opponent_dead_ship != 10:
            if not game_step % 2:
                self._user.step(self._comp.pole.get_ships())
                self._comp.pole.move_ships()
            else:
                self._comp.step(self._user.pole.get_ships())
                self._user.pole.move_ships()
            game_step += 1
        if self._user.count_opponent_dead_ship == 10:
            print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
        else:
            print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...')

    def show_game(self):
        '''–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –µ—Å—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ'''
        player_pole = self._user.pole.get_pole()
        computer_pole = self._comp.pole.get_pole()
        player_chars = ['üåä', 'üõ≥', 'üî•', 'üíÄÔ∏è']
        comp_chars = ['‚¨õ', '‚¨õ', 'üî•', 'üíÄÔ∏è']
        fields_chars = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
        print()
        print('  ', end='')
        print(*fields_chars[:self._pole_size], sep='')
        for i in range(self._pole_size):
            print(fields_chars[i], end='')
            for cell in computer_pole[i]:
                print(comp_chars[cell], end='')
            print('   ', end='')
            for cell in player_pole[i]:
                print(player_chars[cell], end='')
            print()
        print()


def start_game():
    '''–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é'''
    print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–û–†–°–ö–û–ô –ë–û–ô!')
    while True:
        try:
            ans = input(ANS_FOR_CHOICE_MODE)
            if ans.lower().strip() == 'help':
                print(HELP)
                continue
            ans = int(ans)
            if ans not in (1, 2):
                raise ValueError
        except ValueError:
            print('–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n')
        else:
            if ans == 1:
                ClassicSeaBattle()
            else:
                MoveShipsSeaBattle()
            ans = input('–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ "–¥–∞": ')
            if ans.lower().strip() != '–¥–∞':
                break
            print()


if __name__ == '__main__':
    start_game()
